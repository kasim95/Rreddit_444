{"version":3,"sources":["containers/logo.png","actions/index.js","actionTypes/index.js","helpers.js","middleware/index.js","components/SubComment.js","components/Comment.js","containers/CommentContainer.js","components/Post.js","containers/PostContainer.js","containers/SubredditContainer.js","containers/SubredditModalContainer.js","containers/HeaderContainer.js","components/Footer.js","components/Register.js","containers/RegisterContainer.js","components/Login.js","containers/LoginContainer.js","App.js","serviceWorker.js","reducers/postsReducer.js","reducers/commentsReducer.js","reducers/subredditReducer.js","reducers/filterReducer.js","reducers/showSubredditModalReducer.js","reducers/loginReducer.js","reducers/numPostsReducer.js","reducers/rootReducer.js","store.js","index.js"],"names":["module","exports","fetchPostsFailure","error","type","fetchCommentsFailure","postId","setSubreddit","newSubreddit","subreddit","loginFailure","extractPostFromChildren","responseChildren","length","counter","map","child","data","author","created_utc","media","name","num_comments","over_18","permalink","id","selftext","selftext_html","stickied","title","ups","url","downs","Error","getComments","comments","allComments","forEach","element","children","comment","replies","getCommentReplies","push","subcomments","result","kind","reply","getTimeDiff","created_time","Math","floor","Date","getTime","convertHoursToText","timeDiffHours","toggleDiv","idDiv","div","document","getElementById","style","display","console","log","urlsInText","text","html","DOMParser","parseFromString","documentElement","textContent","fetchPosts","dispatch","axios","get","then","response","status","responseJson","parseJson","catch","err","fetchComments","fetchCommentsRequest","commentData","parseJsonComments","fetchCommentsSuccess","loginUser","user","loginRequest","post","userData","isLogged","loginSuccess","SubComment","props","subCommentData","subCommentBodyText","body_html","timeDiffText","subCommentReplies","key","subCommentBodyDivId","Container","className","onClick","href","target","rel","dangerouslySetInnerHTML","__html","querySelectorAll","a","setAttribute","Comment","commentBodyText","subComments","showAll","commentBodyDivId","connect","state","fetchCommentsForPostId","useEffect","allCommentDivs","fontSize","Post","postData","commentsDivId","reddit_id","PostHeader","postHeaderTime","PostTitle","PostMedia","PostUrl","split","slice","join","filterUrl","PostMediaVideo","controls","muted","src","reddit_video","fallback_url","PostMediaImage","alt","imgExtensions","includes","i","PostBody","postBodyText","PostFooter","upvotes","downvotes","posts","allPosts","dispatchFetchComments","filter","numPosts","fullUrl","fetchPostsDispatch","arrPosts","flexDirection","showSubredditModal","dispatchSetSubreddit","dispatchShowSubredditModal","dispatchHideSubredditModal","dispatchSetNumPosts","newNumPosts","Modal","centered","show","onHide","backdrop","Form","onSubmit","e","preventDefault","value","Header","closeButton","Title","Body","Control","size","placeholder","Footer","Button","variant","data-dismiss","logged","login","dispatchFilterBest","dispatchFilterHot","dispatchFilterNew","dispatchFilterTop","dispatchLogout","handleFilter","NavbarBrand","Navbar","Brand","require","width","height","NavbarSubreddit","Nav","Link","event","NavbarLogging","to","collapseOnSelect","expand","bg","Toggle","aria-controls","Collapse","fluid","values","getIn","formik","touched","errors","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","TextField","label","onChange","onBlur","email","helperText","autoComplete","username","color","password","firstName","lastName","birthdate","FormControl","RadioGroup","FormControlLabel","control","Radio","labelPlacement","redditUsername","disabled","loginInfo","dispatchLoginUser","initialValues","sex","validate","field","usernameResponse","fieldExists","test","emailResponse","setSubmitting","passProps","path","exact","render","component","RegisterContainer","LoginContainer","Boolean","window","location","hostname","match","initialPostState","isLoading","postsReducer","action","commentsReducer","postComments","Object","assign","subredditReducer","filterReducer","showSubredditModalReducer","JSON","parse","localStorage","getItem","initialLoginState","isLogging","loginReducer","numPostsReducer","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6e209f82.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.4bcb2b49.png\";","// Redux action creators\r\nimport * as actionTypes from '../actionTypes';\r\n\r\n// Actions for postsReducer\r\nexport const fetchPostsRequest = () => {\r\n    return ({\r\n        type: actionTypes.FETCH_POSTS_REQUEST\r\n    })\r\n};\r\n\r\nexport const fetchPostsSuccess = (data) => {\r\n    return ({\r\n        type: actionTypes.FETCH_POSTS_SUCCESS,\r\n        data\r\n    })\r\n};\r\n\r\nexport const fetchPostsFailure = (error) => {\r\n    return ({\r\n        type: actionTypes.FETCH_POSTS_FAILURE,\r\n        error\r\n    })\r\n};\r\n\r\n// Actions for commentReducer\r\nexport const fetchCommentsRequest = (postId) => {\r\n    return ({\r\n        type: actionTypes.FETCH_COMMENTS_REQUEST,\r\n        postId\r\n    })\r\n}\r\n\r\nexport const fetchCommentsSuccess = (postId, commentData) => {\r\n    return ({\r\n        type: actionTypes.FETCH_COMMENTS_SUCCESS,\r\n        postId,\r\n        commentData\r\n    })\r\n}\r\n\r\nexport const fetchCommentsFailure = (postId, error) => {\r\n    return ({\r\n        type: actionTypes.FETCH_COMMENTS_FAILURE,\r\n        postId,\r\n        error\r\n    })\r\n}\r\n\r\n// Login Actions (use only if required)\r\n// export const logIn = () => ({ type: actionTypes.LOG_IN });\r\n// export const logOut =  () => ({ type: actionTypes.LOG_OUT });\r\n\r\n// Filter Post Actions\r\nexport const filterBest = () => {\r\n    return ({\r\n        type: actionTypes.FILTER_BEST,\r\n        filter: \"best\"\r\n    })\r\n}\r\n\r\nexport const filterHot = () => {\r\n    return ({\r\n        type: actionTypes.FILTER_HOT,\r\n        filter: \"hot\"\r\n    })\r\n}\r\n\r\nexport const filterNew = () => {\r\n    return ({ \r\n        type: actionTypes.FILTER_NEW,\r\n        filter: \"new\"\r\n    })\r\n};\r\n\r\nexport const filterTop = () => {\r\n    return ({\r\n        type: actionTypes.FILTER_TOP,\r\n        filter: \"top\"\r\n\r\n    })\r\n}\r\n\r\n// Add and change subreddit actions\r\nexport const setSubreddit = (newSubreddit) => {\r\n    return ({\r\n        type: actionTypes.SET_SUBREDDIT,\r\n        subreddit: newSubreddit\r\n    })\r\n}\r\n\r\nexport const showSubredditModal = () => {\r\n    return ({\r\n        type: actionTypes.SHOW_SUBREDDIT_MODAL,\r\n    })\r\n}\r\n\r\nexport const hideSubredditModal = () => {\r\n    return ({\r\n        type: actionTypes.HIDE_SUBREDDIT_MODAL,\r\n    })\r\n}\r\n\r\n// actions for login user\r\nexport const loginRequest = user => {\r\n    return ({\r\n        type: actionTypes.LOGIN_REQUEST,\r\n        user\r\n    })\r\n}\r\n\r\nexport const loginSuccess = userData => {\r\n    return ({\r\n        type: actionTypes.LOGIN_SUCCESS,\r\n        userData\r\n    })\r\n}\r\n\r\nexport const loginFailure = error => {\r\n    return ({\r\n        type: actionTypes.LOGIN_FAILURE,\r\n        error\r\n    })\r\n}\r\n\r\nexport const logout = () => {\r\n    return ({\r\n        type: actionTypes.LOGOUT\r\n    })\r\n}\r\n\r\nexport const setNumPosts = num => {\r\n    return ({\r\n        type: actionTypes.SET_NUMPOSTS,\r\n        numPosts: num\r\n    })\r\n}\r\n","// actionTypes used to maintain consistency in type for Redux action objects\r\n\r\n// actionTypes for fetchPost\r\nexport const FETCH_POSTS_REQUEST = \"FETCH_POSTS_REQUEST\";\r\nexport const FETCH_POSTS_SUCCESS = \"FETCH_POSTS_SUCCESS\";\r\nexport const FETCH_POSTS_FAILURE = \"FETCH_POSTS_FAILURE\";\r\n\r\n// actionTypes for fetchComments\r\nexport const FETCH_COMMENTS_REQUEST = \"FETCH_COMMENTS_REQUEST\";\r\nexport const FETCH_COMMENTS_SUCCESS = \"FETCH_COMMENTS_SUCCESS\";\r\nexport const FETCH_COMMENTS_FAILURE = \"FETCH_COMMENTS_FAILURE\";\r\n\r\n// actionType for setSubreddit\r\nexport const SET_SUBREDDIT = \"SET_SUBREDDIT\";\r\n\r\n// actionTypes for SubredditModal\r\nexport const SHOW_SUBREDDIT_MODAL = \"SHOW_SUBREDDIT_MODAL\";\r\nexport const HIDE_SUBREDDIT_MODAL = \"HIDE_SUBREDDIT_MODAL\";\r\n\r\n// actionTypes for filterReducer\r\nexport const FILTER_BEST = \"FILTER_BEST\";\r\nexport const FILTER_HOT = \"FILTER_HOT\";\r\nexport const FILTER_NEW = \"FILTER_NEW\";\r\nexport const FILTER_TOP = \"FILTER_TOP\";\r\n\r\n// actionTypes for logUser (discard later)\r\n// export const LOG_IN = \"LOG_IN\";\r\n// export const LOG_OUT = \"LOG_OUT\";\r\n\r\n// actionTypes for loginUser\r\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\r\nexport const LOGOUT = \"LOGOUT\";\r\n\r\n// actionTypes for setNumPosts\r\nexport const SET_NUMPOSTS = \"SET_NUMPOSTS\";\r\n","export const parseJson = responseJson => {\r\n    if (responseJson) {\r\n        if (responseJson.data.data.children) {\r\n            //console.log(\"Post API detected for parseJson\");\r\n            let children = responseJson.data.data.children;\r\n            return extractPostFromChildren(children);\r\n        }\r\n        else {\r\n            // bad logic (delete this later)\r\n            console.log(\"Comment API detected for parseJson\");\r\n            // let children = responseJson.data[1].data.children;\r\n            // console.log(children);\r\n            // return extractCommentsFromJson(children);\r\n        }\r\n    }\r\n    else {\r\n        console.log(\"No Json object argument in parseJson\");\r\n    }\r\n}\r\n\r\nexport const extractPostFromChildren = responseChildren => {\r\n    if (responseChildren.length >= 0) {\r\n        let counter = 0;\r\n        //console.log(\"extractPostsFromChildren SUCCESS\");\r\n        let result = responseChildren.map(child => {\r\n            return ({\r\n                \"author\": child.data.author,\r\n                \"created_utc\": child.data.created_utc,\r\n                \"id\": counter++,\r\n                \"media\": child.data.media,\r\n                \"name\": child.data.name,\r\n                \"num_comments\": child.data.num_comments,\r\n                \"over_18\": child.data.over_18,\r\n                \"permalink\": child.data.permalink,\r\n                \"reddit_id\":  child.data.id,\r\n                \"selftext\": child.data.selftext,\r\n                \"selftext_html\": child.data.selftext_html,\r\n                \"stickied\": child.data.stickied,\r\n                \"subreddit\": child.data.subreddit,\r\n                \"title\": child.data.title,\r\n                \"upvotes\": child.data.ups,\r\n                \"url\": child.data.url,\r\n                \"downvotes\": child.data.downs\r\n            });\r\n        });\r\n        return result;\r\n    }\r\n    else {\r\n        //console.log(\"extractPostsFromChildren FAILED\")\r\n        throw new Error(\"Children prop in Response Object is not an array\");\r\n    }\r\n}\r\n\r\n// // todo: integrate parseJsonComments into parseJson after logic is corrected for parseJson\r\n// export const parseJsonComments = responseJson => {\r\n//     console.log(\"parseJsonComments called\");\r\n//     let children = responseJson.data[1].data.children;\r\n//     console.log(\"parseJsonComments - children: \", children);\r\n//     let res = extractCommentsFromJson(children);\r\n//     console.log(\"parseJsonComments result: \", res);\r\n//     return res;\r\n// }\r\n\r\n// export const extractCommentsFromJson = responseChildren => {\r\n//     // console.log(\"i am inside extractComments, responseChildren: \", responseChildren)\r\n//     let result = [];\r\n//     responseChildren.forEach(element => {\r\n//         let comment = {\r\n//             \"body\": element.data.body,\r\n//             \"body_html\": element.data.body_html,\r\n//             \"upvotes\": element.data.ups,\r\n//             \"downvotes\": element.data.downs,\r\n//             \"author\": element.data.author,\r\n//             \"reddit_id\": element.data.id,\r\n//             \"replies\": []\r\n//         };\r\n//         if (element.data.replies !== \"\" && element.data.replies.data.children.length > 0) {\r\n//             console.log(element.data.replies.data.children.length +\" comments found\")\r\n//             comment.replies = extractCommentsFromJson(element.data.replies.data.children)\r\n//         }\r\n//         result.push(comment);\r\n//     });\r\n//     console.log(\"Comment result in extractCommentsFromJson is \",result);\r\n//     console.log(\"Result returned\");\r\n//     return result;\r\n// };\r\n\r\nexport const parseJsonComments = responseJson => {\r\n    let children = responseJson.data[1].data.children;\r\n    return getComments(children);\r\n}\r\n\r\nconst getComments = comments => {\r\n    let allComments = [];\r\n    comments.forEach(({data: element}) => {\r\n        // check if the passed element is not a post or subcomment\r\n        if (!element.children) {\r\n            let comment = {...element, replies:[]} // initialize replies to none\r\n            comment.replies = getCommentReplies(element);\r\n            allComments.push(comment)\r\n        }\r\n    })\r\n    return allComments;\r\n}\r\n\r\nexport const getCommentReplies = subcomments => {\r\n    if (!subcomments.replies) {\r\n        return [];\r\n    }\r\n    let result = [];\r\n    const children = subcomments.replies.data.children;\r\n    children.forEach(element => {\r\n        if (element.kind !== \"more\") {\r\n            let reply = {...element.data, replies:[]};\r\n            reply.replies = getCommentReplies(element.data);\r\n            result.push(reply);\r\n        }\r\n    })\r\n    return result;\r\n}\r\n\r\n// return time difference between created_time and current time in hours\r\nexport const getTimeDiff = created_time => {\r\n    const currentTimeUTC = Math.floor(((new Date()).getTime()) / 1000)\r\n    return ((currentTimeUTC - created_time) / (60 * 60))\r\n}\r\n\r\n// return time difference between created_time and cureent time in years, months, days, hours and minutes\r\nexport const convertHoursToText = timeDiffHours => {\r\n    if (timeDiffHours < 1) return `${Math.floor(timeDiffHours * 60)} minutes ago`;\r\n    else if (timeDiffHours < 24) return `${Math.floor(timeDiffHours)} hours ago`;\r\n    else if (timeDiffHours < (24 * 30)) return `${Math.floor(timeDiffHours / 24)} days ago`;\r\n    else if (timeDiffHours < (24 * 30 * 12)) return `${Math.floor(timeDiffHours / (24 * 30))} months ago`;\r\n    else return `${Math.floor(timeDiffHours / (24 * 30 * 12))} years ago`;\r\n\r\n}\r\n\r\n// handleonClick hide events\r\nexport const toggleDiv = idDiv  => {\r\n    let div = document.getElementById(idDiv);\r\n        if (div) {\r\n            if (div.style.display === \"none\") div.style.display = \"block\";\r\n            else div.style.display = \"none\";    \r\n        }\r\n    else console.log(\"no div found to toggle \", idDiv);\r\n}\r\n\r\n// convert HTML Entity References to text\r\nexport const decodeHTMLEntities = html => {\r\n    var doc = new DOMParser().parseFromString(html, \"text/html\");\r\n    return doc.documentElement.textContent;\r\n}\r\n\r\n// convert links in text to anchors \r\n// just checks text before calling decodeHTMLEntities\r\nexport const urlsInText = text => {\r\n    if (!text) return text;\r\n    else if (text === \"null\") return \"\";\r\n    return decodeHTMLEntities(text);\r\n}\r\n\r\n\r\n// remove https, http and www from url for display\r\nexport const filterUrl = url => {\r\n    let result = url;\r\n    if (result.split('//').length > 1) {\r\n        result = result.split(\"//\")[1]\r\n    }\r\n    if (result.split(\".\")[0] === \"www\") {\r\n        result = result.split(\".\").slice(1, result.length).join(\".\");\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\n// Convert links in text to anchor tags\r\n// THIS FUNCTION IS NOT USED (CAN DELETE)\r\n// https://stackoverflow.com/questions/37684/how-to-replace-plain-urls-with-links\r\nexport const linkify = inputText => {\r\n    var replacedText, replacePattern1, replacePattern2, replacePattern3;\r\n\r\n    // URLs starting with http://, https://, or ftp://\r\n    // eslint-disable-next-line\r\n    replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\r\n    replacedText = inputText.replace(replacePattern1, '<a href=\"$1\" target=\"_blank\">$1</a>');\r\n    \r\n    // URLs starting with \"www.\" (without // before it, or it'd re-link the ones done above).\r\n    // eslint-disable-next-line\r\n    replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\r\n    replacedText = replacedText.replace(replacePattern2, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\r\n\r\n    // Change email addresses to mailto:: links.\r\n    // eslint-disable-next-line\r\n    replacePattern3 = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\r\n    replacedText = replacedText.replace(replacePattern3, '<a href=\"mailto:$1\">$1</a>');\r\n\r\n    return replacedText;\r\n}\r\n","import { \r\n    fetchPostsRequest, \r\n    fetchPostsSuccess, \r\n    fetchPostsFailure, \r\n    fetchCommentsRequest, \r\n    fetchCommentsFailure, \r\n    fetchCommentsSuccess, \r\n    loginRequest,\r\n    loginSuccess,\r\n    loginFailure\r\n} from '../actions';\r\nimport axios from 'axios';\r\nimport { parseJson, parseJsonComments } from '../helpers';\r\n\r\nexport const fetchPosts = (url) => {\r\n    // use middleware here i.e. dispatch actionCreators\r\n    return function(dispatch) {\r\n        dispatch(fetchPostsRequest());\r\n        axios.get(url)\r\n        .then(response => {\r\n            if (response.status >= 200 && response.status <= 299) {\r\n                // console.log(\"Success fetching Reddit API\", response);\r\n                \r\n                // parse Json to get posts as an array and dispatch Success action\r\n                let result = parseJson(response);\r\n                console.log('Output from parseJson is ', result)\r\n                dispatch(fetchPostsSuccess(result));\r\n            }\r\n            else {\r\n                // dispatch Failure action\r\n                // console.log(\"Failed fetching Reddit API \", response);\r\n                dispatch(fetchPostsFailure(response.error));\r\n            }\r\n        })\r\n        .catch(err => {\r\n            dispatch(fetchPostsFailure(err))\r\n        })\r\n    }\r\n};\r\n\r\nexport const fetchComments = (postId, url) => {\r\n    // console.log(\"fetchComments called - url:\", url, \" postId: \", postId);\r\n    return function(dispatch) {\r\n        dispatch(fetchCommentsRequest(postId));\r\n        axios.get(url)\r\n        .then(response => {\r\n            if (response.status >= 200 && response.status <= 299) {\r\n                const commentData = parseJsonComments(response);\r\n                // console.log(\"Comments fetch success \", response, \" parsedJson: \", commentData, \"postId: \", postId);\r\n                dispatch(fetchCommentsSuccess(postId, commentData));                \r\n                // dispatch(fetchCommentsSuccess([]))\r\n            }\r\n            else {\r\n                // console.log(\"Comments fetch failed\")\r\n                const error = response.error;\r\n                dispatch(fetchCommentsFailure(postId, error));\r\n            }\r\n        })\r\n        .catch(err => {\r\n            dispatch(fetchCommentsFailure);\r\n        })\r\n    }\r\n};\r\n\r\nexport const loginUser = user => {\r\n    return function(dispatch) {\r\n        console.log(\"I am inside loginUser dispatch fn\");\r\n        dispatch(loginRequest(user));\r\n\r\n        const loginUrl = \"/loginUser\";\r\n        axios.post(loginUrl, user)\r\n        .then(response => {\r\n            console.log(\"I am inside Post req .then\", response);\r\n            if (response.status >= 200 && response.status <= 299 && response.data.isLogged) {\r\n                console.log(\"Login User success \", response);\r\n                let userData;\r\n                if (response.data.userData) {\r\n                    userData = response.data.userData;\r\n                }\r\n                dispatch(loginSuccess(userData));\r\n            }\r\n            else {\r\n                console.log(\"Login user authentication failure\");\r\n                dispatch(loginFailure(\"Login user authentication failure\"));\r\n            }            \r\n        })\r\n        .catch(error => {\r\n            console.log('I am inside Post req .catch')\r\n            console.error(\"Login user failed \", error);\r\n            dispatch(loginFailure(error));\r\n        });\r\n    }\r\n}","import React from 'react';\r\nimport './SubComment.css';\r\nimport { Container } from 'react-bootstrap';\r\nimport { getTimeDiff, toggleDiv, convertHoursToText, urlsInText } from '../helpers';\r\n\r\nfunction SubComment(props) {\r\n    if (props.subCommentData) {\r\n        // body text\r\n        const subCommentBodyText = urlsInText(props.subCommentData.body_html);\r\n\r\n        // time\r\n        const timeDiffText = convertHoursToText(getTimeDiff(props.subCommentData.created_utc));\r\n        \r\n        // replies\r\n        let subCommentReplies = []\r\n        if (props.subCommentData.replies.length > 0) {\r\n            props.subCommentData.replies.forEach(element => subCommentReplies.push(<SubComment key={element.id} subCommentData={element} />))\r\n        }\r\n\r\n        // hide function for onClick event\r\n        let subCommentBodyDivId = \"subCommentBodyDiv_\";\r\n        if (props.subCommentData) subCommentBodyDivId = \"subCommentBodyDiv_\"+props.subCommentData.id;\r\n\r\n        return (\r\n            <Container className=\"bg-dark variant-dark subCommentDiv pt-1\">\r\n                {/*<a href=\"#hide\" className=\"subCommentHeaderAnchor\" onClick={() => toggleDiv(subCommentBodyDivId)}>*/}\r\n                <div className=\"subCommentHeaderDiv\" onClick={() => toggleDiv(subCommentBodyDivId)}>       \r\n                    <a\r\n                    className=\"subCommentAuthor\"\r\n                    href={`https://reddit.com/user/${props.subCommentData.author}`}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    >\r\n                        {props.subCommentData.author}\r\n                    </a>                        \r\n                    <small>\r\n                        {\"   \"+timeDiffText}        \r\n                    </small>\r\n                </div>\r\n                {/*</a>*/}\r\n                <div className=\"subCommentBodyDiv\" id={\"subCommentBodyDiv_\"+props.subCommentData.id}>\r\n                    <div className=\"subCommentText\">\r\n                        {<p id=\"subCommentBodyText\" className=\"subCommentBodyText\" dangerouslySetInnerHTML={{ __html: subCommentBodyText}}></p>}\r\n                    \r\n                        {/* props.subCommentData.body */}\r\n                    </div>\r\n                    <div className=\"subCommentReplies\">  \r\n                        {subCommentReplies}                                  \r\n                    </div>\r\n                </div>\r\n                {document.querySelectorAll(\"#subCommentBodyText a\").forEach(a => a.setAttribute(\"target\", \"_blank\"))}\r\n            </Container>\r\n        )    \r\n    }\r\n    else {\r\n        return <p>No subcomments</p>\r\n    }\r\n};\r\n\r\nexport default SubComment;\r\n","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './Comment.css';\r\nimport SubComment from './SubComment';\r\nimport { getTimeDiff, toggleDiv, convertHoursToText, urlsInText } from '../helpers';\r\n\r\nconst Comment = props => {\r\n    \r\n    if (props.commentData) {\r\n        // convert links in comment to anchors\r\n        const commentBodyText = urlsInText(props.commentData.body_html);\r\n\r\n        //time\r\n        const timeDiffText = convertHoursToText(getTimeDiff(props.commentData.created_utc));\r\n\r\n        // replies\r\n        let subComments = []\r\n        if (props.showAll && props.commentData.replies.length > 0) {\r\n            props.commentData.replies.forEach(element => {\r\n                subComments.push(<SubComment key={element.id} subCommentData={element} />)\r\n            })    \r\n        }\r\n\r\n        // Comment Header onClick event\r\n        let commentBodyDivId = \"commentBodyDiv_\";\r\n        if (props.commentData) commentBodyDivId = \"commentBodyDiv_\"+props.commentData.id;\r\n\r\n        return (\r\n            <Container className=\"bg-dark text-white p-2 m-1 rounded commentDiv\">\r\n                {/*<a href=\"#hide\" onClick={() => toggleDiv(commentBodyDivId)} className=\"commentHeaderAnchor\">*/}\r\n                <div className=\"commentHeaderDiv\" onClick={() => toggleDiv(commentBodyDivId)}>\r\n                    <a\r\n                    className=\"commentAuthor\"\r\n                    href={`https://reddit.com/user/${props.commentData.author}`}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    >\r\n                        {props.commentData.author}\r\n                    </a>\r\n                    <div className=\"pl-1 d-inline-block\">\r\n                        <small>\r\n                            {timeDiffText}\r\n                        </small>\r\n                    </div>\r\n                </div>\r\n                {/*</a>*/}\r\n                <div className=\"commentBodyDiv\" id={\"commentBodyDiv_\"+props.commentData.id}>\r\n                    <div className=\"commentTextDiv\">\r\n                        {<p id=\"commentBodyText\" className=\"commentBodyText\" dangerouslySetInnerHTML={{ __html: commentBodyText}}></p>}\r\n                    \r\n                    </div>\r\n                    <div className=\"commentSubCommentsDiv\">\r\n                        {subComments}\r\n                    </div>\r\n                </div> \r\n                {document.querySelectorAll(\"#commentBodyText a\").forEach(a => a.setAttribute(\"target\", \"_blank\"))}\r\n            </Container>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container className=\"bg-dark text-white rounded commentDiv\">\r\n                <p>No Comments found</p>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Comment;\r\n","import React, { useEffect } from 'react';\r\n// eslint-disable-next-line\r\nimport Comment from '../components/Comment';\r\nimport { connect }  from 'react-redux';\r\nimport { fetchComments } from '../middleware'\r\n\r\nconst CommentContainer = props => {\r\n    const postId = props.postId;\r\n    \r\n    // const comment_url = \"https://www.reddit.com/r/news/comments/hr7vza/.json?\";\r\n    const url = `https://www.reddit.com/r/${props.subreddit}/comments/${postId}/.json?`;\r\n    \r\n    // eslint-disable-next-line\r\n    useEffect(() => props.fetchCommentsForPostId(postId, url), [])    \r\n    \r\n    let commentData = []\r\n    if (postId in props.comments) {\r\n        commentData = props.comments[postId].commentData;\r\n    }\r\n    // console.log(\"CommentContainer - postId\", postId, \", commentData \",commentData);\r\n\r\n    let allCommentDivs = []\r\n    commentData.forEach(element => {\r\n        allCommentDivs.push(<Comment showAll={props.showAll} key={element.id} commentData={element} />);\r\n    });\r\n    return (\r\n        <div style={{display: \"block\"}}>\r\n            {/* <Comment commentData={commentData} /> */}\r\n            {allCommentDivs.length > 0 ? allCommentDivs : <p style={{fontSize: \"12px\"}}>No Comments found</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        subreddit: state.subreddit,\r\n        comments: state.comments\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return ({\r\n        fetchCommentsForPostId: (postId, url) => {\r\n            dispatch(fetchComments(postId, url))\r\n        }    \r\n    })\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentContainer);\r\n","import './Post.css'\r\nimport React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport CommentContainer from '../containers/CommentContainer';\r\nimport { getTimeDiff, convertHoursToText, toggleDiv, urlsInText, filterUrl } from '../helpers';\r\n\r\nfunction Post(props) {\r\n    if (props.postData) {\r\n        // separate commentDivId for each Post Comment (used in PostFooter and PostComments)\r\n        const commentsDivId = \"subCommentsDiv_\" + props.postData.reddit_id;\r\n            \r\n        \r\n        // Post Header\r\n        const PostHeader = props => {\r\n            // calculate time when the post was created\r\n            let postHeaderTime = convertHoursToText(getTimeDiff(props.postData.created_utc));\r\n            return (\r\n                <div className=\"postheaderDiv pb-3 mb-1\">\r\n                    Posted by \r\n                    <a \r\n                    className=\"postauthor pl-1\" \r\n                    href={\"https://reddit.com/user/\"+props.postData.author} \r\n                    target=\"_blank\" \r\n                    rel=\"noopener noreferrer\" \r\n                    >\r\n                        {props.postData.author}\r\n                    </a> \r\n                    <div className=\"pl-1 d-inline-block\">\r\n                        <small>\r\n                            {postHeaderTime}\r\n                        </small>\r\n                    </div>\r\n\r\n                    {/* eslint-disable-next-line */}\r\n                    <a \r\n                    className=\"postredditicon fab fa-reddit fa-2x float-right\" \r\n                    href={\"https://www.reddit.com\"+props.postData.permalink} \r\n                    target=\"_blank\" \r\n                    rel=\"noopener noreferrer\" />\r\n                </div>\r\n            )\r\n        }\r\n\r\n        const PostTitle = props => (\r\n            <div className=\"posttitleDiv\">\r\n                <p className=\"posttitle\">{props.postData.title}</p>\r\n            </div>\r\n        )\r\n        \r\n        // Post Media Subcomponent\r\n        const PostMedia = props => {\r\n\r\n            // Post Url Subcomponent\r\n            const PostUrl = props => {\r\n                if (props.url) {\r\n                    return (\r\n                        <a className=\"posturl\" href={props.url } target=\"_blank\" rel=\"noopener noreferrer\" >\r\n                            <div className=\"far fa-share-square\" rel=\"noopener noreferrer\" /> \r\n                            {\" \"+filterUrl(props.url).slice(0, 24)+\"...\"}\r\n                        </a>\r\n                    )\r\n                }\r\n                else return null;\r\n            }\r\n\r\n            // Post Media Video Subcomponent\r\n            const PostMediaVideo = props => {\r\n                // // video / video and url\r\n                // // audio doesnt work (Audio GET request gives Access Denied error)\r\n                // let videoUrlarr = props.media.reddit_video.fallback_url.split('/');\r\n                // videoUrlarr[videoUrlarr.length - 1] = \"audio\";\r\n                // const audioUrl = videoUrlarr.join('/');\r\n                return (\r\n                    <video id=\"postMediaVideo\" className=\"postMediaVideo\" controls muted>\r\n                        <source src={props.media.reddit_video.fallback_url} />\r\n                        {/*\r\n                        <audio id=\"postMediaAudio\" controls>\r\n                            <source src={audioUrl} type=\"audio/mpeg\"/>\r\n                        </audio>\r\n                        */}\r\n                    </video>\r\n                )\r\n            }\r\n\r\n            const PostMediaImage = props => (\r\n                <div className=\"postMediaDiv\">\r\n                    <img className=\"postMediaImage\" src={props.url} alt=\"\" />\r\n                </div>\r\n            )\r\n            \r\n            const imgExtensions = ['.gif', '.png', '.jpg', '.jpeg'];\r\n            if (props.media && props.media.reddit_video) {\r\n                // video\r\n                if (props.url.includes('v.redd.it')) {\r\n                    return (\r\n                        <div className=\"postMediaDiv\">\r\n                            <PostMediaVideo media={props.media} />\r\n                        </div>\r\n                    )\r\n                }\r\n                else {\r\n                    // video and url\r\n                    return (\r\n                        <div>\r\n                            <PostMediaVideo media={props.media} />\r\n                            <PostUrl url={props.url} />\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n            else if (props.url)\r\n            // image\r\n                for (let i=0; i<imgExtensions.length; i++) {\r\n                    if (props.url.includes(imgExtensions[i])) {\r\n                        return (\r\n                            <PostMediaImage url={props.url} />\r\n                        )\r\n                    }\r\n                }\r\n\r\n            // if no video or image just return url\r\n            return (\r\n                <PostUrl url={props.url} />\r\n            )\r\n        }\r\n\r\n        const PostBody = props => {\r\n            // convert text to links and formatting\r\n            const postBodyText = urlsInText(props.postData.selftext_html);\r\n            return (\r\n                <div className=\"postbodyDiv pb-1 mb-1 mt-1\">\r\n                    {<p id=\"postbody\" className=\"postbody\" dangerouslySetInnerHTML={{ __html: postBodyText}}></p>}\r\n                    <PostMedia url={props.postData.url} media={props.postData.media}/>\r\n                    {/* post body url here */}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        const PostFooter = props => (\r\n            <div className=\"postfooterDiv mt-1\">\r\n                <div className=\"postvoteicon fas fa-arrow-circle-up fa-x\" /> <small>{props.postData.upvotes - props.postData.downvotes}</small>\r\n                {/* eslint-disable-next-line */}\r\n                <a className=\"postcommenticon far fa-comment pt-1 pl-1\" href=\"#toggleComments\" onClick={() => toggleDiv(props.commentsDivId)} />\r\n            </div>\r\n        )\r\n\r\n        return (\r\n            <Container className=\"bg-dark text-white p-2 rounded m-3 postDiv\">\r\n                <PostHeader postData={props.postData} />\r\n                <PostTitle postData={props.postData} />\r\n                <PostBody postData={props.postData} />\r\n                <PostFooter postData={props.postData} commentsDivId={commentsDivId} />\r\n                \r\n                {/* dnt call imported React components inside defined subcomponents (redundant commentcontainer calls) */}\r\n                <div id={commentsDivId} style={{display: \"none\"}}>\r\n                    {<CommentContainer showAll={props.showAll} postId={props.postData.reddit_id} commentsDivId={commentsDivId} />}\r\n                </div>\r\n                \r\n                \r\n                {/* PostBody: Set target of postBody anchor tags to _blank */}\r\n                {document.querySelectorAll(\"#postbody a\").forEach(a => a.setAttribute(\"target\", \"_blank\"))}\r\n                \r\n                {/* PostMedia: Sync audio and video playback in Post Media */}\r\n                {/*\r\n                    document.getElementById(\"postMediaVideo\") ? \r\n                    document.getElementById(\"postMediaVideo\").onplay = () => document.getElementById(\"postMediaAudio\").play() :\r\n                    null\r\n                */}\r\n                {/*\r\n                    document.getElementById(\"postMediaVideo\") ?\r\n                    document.getElementById(\"postMediaVideo\").onpause = () => document.getElementById(\"postMediaAudio\").pause() :\r\n                    null\r\n                */}\r\n            </Container>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n        <h5>No Post data loaded</h5>\r\n        )\r\n    }\r\n}\r\nexport default Post;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchComments } from '../middleware';\r\n// import CommentContainer from '../containers/CommentContainer';\r\nimport Post from '../components/Post';\r\n\r\nconst PostContainer = props => {\r\n    const postId = props.postId;\r\n    let postData;\r\n    for (let i=0; i<props.allPosts.length; i++) {\r\n        if (postId && props.allPosts[i].reddit_id === postId) {\r\n            postData = props.allPosts[i];\r\n            break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Post showAll={props.showAll} key={postId} postData={postData} />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    let result = []\r\n    state.posts.data.forEach(element => {\r\n        result.push(element);\r\n        \r\n    })\r\n    return {\r\n        subreddit: state.subreddit,\r\n        allPosts: result    \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =  dispatch => ({\r\n    dispatchFetchComments: dispatch(fetchComments)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostContainer);\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts } from '../middleware';\r\nimport PostContainer from '../containers/PostContainer';\r\n// import axios from 'axios';\r\n// import { parseJson } from '../helpers';\r\n\r\n// todo: once Comment fetch is completed and render is completed for Posts and Comments, remove subreddit name from store to prevent false API calls during store/state changes\r\n// another fix: call all dispatches for fetch using useEffect and exclude subreddit in dependancy\r\n\r\nfunction SubredditContainer(props) {\r\n    //  one good change  is to also move the fetchPosts function here cause this is the only container that will ever call it\r\n    // this also makes it easier to remove subreddit from store which means no repetitive fetch requests for every state change\r\n    \r\n    // Hardcoded post url and params (delete later)\r\n    // const url = \"https://www.reddit.com/r/news/top/.json?\";\r\n    // const params = \"limit=10\";\r\n    \r\n    //const url = `https://www.reddit.com/r/${useSelector(state => state.subreddit)}/${useSelector(state => state.filter)}/.json?`;\r\n    const url = `https://www.reddit.com/r/${props.subreddit}/${props.filter}/.json?`;\r\n    //const params = \"limit=10\";\r\n    const params = `limit=${props.numPosts}`;\r\n    const fullUrl = url+params;\r\n    \r\n    // useEffect is used to mimic ComponentDidMount lifecycle method\r\n    // It also prevents fetchPosts being called unnecessarily when other state values change\r\n    //  the 2nd argument to useEffect contains the dependancies so it will be called whenever any value in it changes\r\n    //useEffect(() => props.fetchPosts(url+params), [])\r\n    // useEffect(() => props.fetchPosts(url+params), [props.fetchPosts])\r\n\r\n    const fetchPostsDispatch = fullUrl => props.fetchPosts(fullUrl);\r\n    // disable useEffect missing dependancies warning\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    useEffect(() => fetchPostsDispatch(fullUrl), [props.subreddit, props.filter, props.numPosts]);\r\n\r\n    let arrPosts = [];\r\n    for (let i=0; i < props.allPosts.length; i++) {\r\n        arrPosts.push(<PostContainer showAll={props.showAll} key={i} postId={props.allPosts[i].reddit_id} />)\r\n    }\r\n\r\n    return (\r\n        <div className=\"row align-content-center\" style={{flexDirection: \"column\"}}>\r\n            {/*arrPosts.length > 0 && arrPosts[0]*/}\r\n            {arrPosts}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = function(state) {\r\n    let result = []\r\n    state.posts.data.forEach(element => {\r\n        result.push(element);\r\n    });\r\n    // console.log(\"I am in mapStatetoProps\", result)\r\n    return {\r\n        data: state.data,\r\n        error: state.posts.error,\r\n        //logged: state.logged, //do not include logged here as using props in useEffect dependancies calls fetchPosts infinite times\r\n        subreddit: state.subreddit,\r\n        filter: state.filter,\r\n        numPosts: state.numPosts,\r\n        allPosts: result\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = function(dispatch) {\r\n    return ({\r\n        fetchPosts: (fullUrl) => {dispatch(fetchPosts(fullUrl))}\r\n    })\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SubredditContainer);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form, Modal, Button } from 'react-bootstrap';\r\nimport { \r\n    setSubreddit, \r\n    showSubredditModal, \r\n    hideSubredditModal,\r\n    setNumPosts\r\n} from '../actions';\r\n\r\nconst SubredditModalContainer = props => {\r\n    //const modalId = \"changeSubredditModal\";\r\n    \r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        let newNumPosts;\r\n        if (document.getElementById(\"subredditNumPosts\").value < 30) {\r\n            newNumPosts = document.getElementById(\"subredditNumPosts\").value;\r\n        }\r\n        else {\r\n            newNumPosts = 30;\r\n        }\r\n        const newSubreddit = document.getElementById(\"subredditName\").value;\r\n        \r\n        // console.log(\"Submit button \", newSubreddit)\r\n        if (newSubreddit && newNumPosts) {\r\n            props.dispatchSetNumPosts(newNumPosts);\r\n            props.dispatchSetSubreddit(newSubreddit);\r\n        }\r\n        else if (newSubreddit) {\r\n            props.dispatchSetSubreddit(newSubreddit)\r\n        }\r\n        else if (newNumPosts) {\r\n            props.dispatchSetNumPosts(newNumPosts);\r\n        }\r\n        else {\r\n            props.dispatchHideSubredditModal();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            centered\r\n            show={props.showSubredditModal}\r\n            onHide={props.dispatchHideSubredditModal}\r\n            backdrop=\"static\"    \r\n        >\r\n            <Form id=\"changeSubredditForm\" onSubmit={handleSubmit}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Change Subreddit</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Control \r\n                type=\"text\" \r\n                size=\"lg\" \r\n                id=\"subredditName\"\r\n                className=\"mb-1\"\r\n                placeholder={\"Subreddit: \" + props.subreddit} \r\n                />\r\n                \r\n                <Form.Control \r\n                type=\"number\" \r\n                size=\"lg\"\r\n                id=\"subredditNumPosts\"\r\n                className=\"mt-1\"\r\n                placeholder={\"Number of Posts (max 30): \" + props.numPosts} \r\n                />\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"btn btn-danger\" onClick={() => props.dispatchHideSubredditModal()}>Close</Button>\r\n                <Button variant=\"btn btn-success\" type=\"submit\" data-dismiss=\"modal\">Save Changes</Button>\r\n            </Modal.Footer>\r\n            </Form>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        subreddit: state.subreddit,\r\n        showSubredditModal: state.showSubredditModal,\r\n        numPosts: state.numPosts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    dispatchSetSubreddit: newSubreddit => dispatch(setSubreddit(newSubreddit)),\r\n    dispatchShowSubredditModal: () => dispatch(showSubredditModal()),\r\n    dispatchHideSubredditModal: () => dispatch(hideSubredditModal()),\r\n    dispatchSetNumPosts: newNumPosts => dispatch(setNumPosts(newNumPosts))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SubredditModalContainer);","import React from 'react';\r\nimport './HeaderContainer.css';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\n// import { NavItem, Form, FormControl, Button, NavDropdown, Modal } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { filterBest, filterHot, filterNew, filterTop, setSubreddit, showSubredditModal, hideSubredditModal, logout } from '../actions';\r\nimport SubredditModalContainer from './SubredditModalContainer';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const HeaderContainer = props => {\r\n    const handleFilter = e => {\r\n        switch (e.target.id) {\r\n            case \"best\":\r\n                props.dispatchFilterBest();\r\n                break;\r\n            case \"hot\":\r\n                props.dispatchFilterHot();\r\n                break;\r\n            case \"new\":\r\n                props.dispatchFilterNew();\r\n                break;\r\n            case \"top\":\r\n                props.dispatchFilterTop();\r\n                break;\r\n            default:\r\n                console.log(\"default filter called\")\r\n        }\r\n    }\r\n\r\n    const NavbarBrand = () => {\r\n        return (\r\n            <Navbar.Brand href=\"/\" className=\"logo\">\r\n                <img alt=\"Rreddit 444\"\r\n                    src={require(\"./logo.png\")} \r\n                    width=\"30\"\r\n                    height=\"30\"\r\n                    className='d-inline-block align-top' \r\n                />\r\n                {'  '}\r\n                Rreddit 444\r\n            </Navbar.Brand>\r\n        )\r\n    }\r\n\r\n    \r\n    const NavbarSubreddit = () => {\r\n        return (\r\n            <div>\r\n                <SubredditModalContainer />\r\n                <Nav.Link href=\"#subreddit\" \r\n                        id=\"changeSubreddit\" \r\n                        onClick={event => props.dispatchShowSubredditModal()}\r\n                >\r\n                    {\"r/\"+props.subreddit}\r\n                </Nav.Link>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    const NavbarLogging = () => {\r\n        if (props.login.isLogged) {\r\n            return (\r\n                <Nav>\r\n                    <Nav.Link href=\"#logout\" onClick={() => props.dispatchLogout()}>Log Out</Nav.Link>\r\n                </Nav>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <Nav>\r\n                    <Link to=\"/register\" className=\"nav-link\">Register</Link>\r\n                    <Link to=\"/login\" className=\"nav-link\">Log In</Link>\r\n                    {/*<Nav.Link href=\"/register\">Register</Nav.Link>\r\n                    <Nav.Link href=\"/login\">Log In</Nav.Link>*/}\r\n                </Nav>\r\n            )\r\n    \r\n        }\r\n    }\r\n\r\n    return (\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <NavbarBrand />\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"#best\" id=\"best\" onClick={handleFilter}>Best</Nav.Link>\r\n                    <Nav.Link href=\"#hot\" id=\"hot\" onClick={handleFilter}>Hot</Nav.Link>\r\n                    <Nav.Link href=\"#new\" id=\"new\" onClick={handleFilter}>New</Nav.Link>\r\n                    <Nav.Link href=\"#top\" id=\"top\" onClick={handleFilter}>Top</Nav.Link>\r\n                    <NavbarSubreddit />\r\n                </Nav>\r\n                <NavbarLogging />\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        subreddit: state.subreddit,\r\n        logged: state.logged,\r\n        filter: state.filter,\r\n        login: state.login\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return ({\r\n        dispatchFilterBest: () => dispatch(filterBest()),\r\n        dispatchFilterHot: () => dispatch(filterHot()),\r\n        dispatchFilterNew: () => dispatch(filterNew()),\r\n        dispatchFilterTop: () => dispatch(filterTop()),\r\n        dispatchSetSubreddit: newSubreddit => dispatch(setSubreddit(newSubreddit)),\r\n        dispatchShowSubredditModal: () => dispatch(showSubredditModal()),\r\n        dispatchHideSubredditModal: () => dispatch(hideSubredditModal()),\r\n        dispatchLogout: () => dispatch(logout())\r\n    })\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderContainer);","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport './Footer.css';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <Container fluid className=\"footer text-right pt-3 bg-dark text-white\">\r\n            <p className=\"align-right\">Credits: Kasim Panjri</p>\r\n            <a href=\"https://www.github.com/kasim95\" className=\"footer align-right \">Github</a>\r\n        \r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport { connect, getIn } from 'formik';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport {\r\n    TextField,\r\n    FormControl, \r\n    FormControlLabel, \r\n    Radio, \r\n    RadioGroup\r\n} from '@material-ui/core';\r\n\r\nconst Register = props => {\r\n    /*\r\n    const {\r\n        values,\r\n        touched,\r\n        errors,\r\n        dirty,\r\n        isSubmitting,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        handleReset\r\n    } = props;\r\n    */\r\n    const values = getIn(props.formik.values);\r\n    const touched = getIn(props.formik.touched);\r\n    const errors = getIn(props.formik.errors);\r\n    const dirty = getIn(props.formik.dirty);\r\n    const isSubmitting = getIn(props.formik.isSubmitting);\r\n    const handleChange = getIn(props.formik.handleChange);\r\n    const handleBlur = getIn(props.formik.handleBlur);\r\n    const handleSubmit = getIn(props.formik.handleSubmit);\r\n    const handleReset = getIn(props.formik.handleReset);\r\n    // const dispatch = getIn(props.formik.dispatch);\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"d-flex flex-row justify-content-center\">\r\n                <div \r\n                className=\"\r\n                    col-xs-5\r\n                    d-flex \r\n                    justify-content-center \r\n                    flex-column \r\n                    m-5\r\n                    border \r\n                    border-dark \r\n                    rounded\r\n                    w-xs\r\n                    \"\r\n                >\r\n                    <div className=\"col-xs-12 m-0 p-1 text-center\">\r\n                        <h4>\r\n                            Sign up\r\n                        </h4>\r\n                    </div>\r\n\r\n                    <div className=\"col-xs-12 m-0 p-2\">\r\n                        {/* Email */}\r\n                        <TextField\r\n                        label=\"Email\"\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.email}\r\n                        placeholder=\"abc@xyz.com\"\r\n                        error={touched.email}\r\n                        helperText={touched.email && errors.email}\r\n                        className=\"w-100\"\r\n                        variant=\"filled\"\r\n                        autoComplete=\"email\"\r\n                        />\r\n                    </div>\r\n                    \r\n                    <div className=\"row m-0\">\r\n                        <div className=\"col-xs-12 col-sm-6 p-2\">\r\n                            {/* Username */}\r\n                            <TextField\r\n                            label=\"Username\"\r\n                            type=\"text\"\r\n                            name=\"username\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.username}\r\n                            placeholder=\"Upto 20 characters\"\r\n                            error={touched.username}\r\n                            helperText={touched.username && errors.username}\r\n                            variant=\"filled\"\r\n                            className=\"w-100\"\r\n                            color=\"secondary\"\r\n                            autoComplete=\"username\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-xs-12 col-sm-6 p-2\">\r\n                            {/* Password */}\r\n                            <TextField\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.password}\r\n                            placeholder=\"\"\r\n                            error={touched.password}\r\n                            helperText={touched.password && errors.password}\r\n                            variant=\"filled\"\r\n                            className=\"w-100\"\r\n                            autoComplete=\"password\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row m-0\">\r\n                        <div className=\"col-xs-12 col-sm-6 p-2\" >\r\n                            {/* First Name */}\r\n                            <TextField\r\n                            label=\"First Name\"\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.firstName}\r\n                            placeholder=\"John\"\r\n                            error={touched.firstName}\r\n                            helperText={touched.firstName && errors.firstName}\r\n                            className=\"w-100\"\r\n                            variant=\"filled\"\r\n                            autoComplete=\"given-name\"\r\n                            />\r\n                        </div>\r\n                        <div  className=\"col-xs-12 col-sm-6 p-2\">\r\n                            {/* Last Name */}\r\n                            <TextField\r\n                            label=\"Last Name\"\r\n                            type=\"text\"\r\n                            name=\"lastName\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.lastName}\r\n                            placeholder=\"Smith\"\r\n                            error={touched.lastName}\r\n                            helperText={touched.lastName && errors.lastName}\r\n                            className=\"w-100\"\r\n                            variant=\"filled\"\r\n                            autoComplete=\"family-name\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row align-self-center m-0\">\r\n                        <div className=\"col-xs-12 col-sm-4 p-2 align-self-center\">\r\n                            {/* Birthdate */}\r\n                            <div className=\"\">\r\n                                    BirthDate\r\n                            </div>\r\n                            <div>\r\n                                <TextField\r\n                                label=\"\"\r\n                                type=\"date\"\r\n                                name=\"birthdate\"\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.birthdate}\r\n                                placeholder=\"Birthdate\"\r\n                                error={touched.birthdate}\r\n                                helperText={touched.birthdate && errors.birthdate}\r\n                                className=\"w-100\"\r\n                                variant=\"filled\"\r\n                                autoComplete=\"bday\"\r\n                                />                    \r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Sex */}\r\n                        <div className=\"col-xs-12 col-sm-1 align-self-center p-2 pl-4\">\r\n                            Sex\r\n                        </div>\r\n\r\n                        <div className=\"col-xs-12 col-sm-2 align-self-end p-2\">\r\n                            <FormControl name=\"sex\">\r\n                                <RadioGroup \r\n                                className=\"d-flex flex-row\"\r\n                                >\r\n                                    <FormControlLabel \r\n                                    control={\r\n                                        <Radio\r\n                                        name=\"sex\" \r\n                                        value=\"male\"\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        autoComplete=\"sex\"\r\n                                        />\r\n                                    }\r\n                                    label=\"Male\"\r\n                                    labelPlacement=\"end\"\r\n                                    className=\"m-0 p-0\"\r\n                                    />\r\n                                    <FormControlLabel \r\n                                    control={\r\n                                        <Radio\r\n                                        name=\"sex\"\r\n                                        value=\"female\"\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        autoComplete=\"sex\"\r\n                                        />\r\n                                    }\r\n                                    label=\"Female\"\r\n                                    labelPlacement=\"end\"\r\n                                    className=\"m-0 p-0\"\r\n                                    />\r\n                                    <FormControlLabel \r\n                                    control={\r\n                                        <Radio\r\n                                        name=\"sex\"\r\n                                        value=\"other\"\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        autoComplete=\"sex\"\r\n                                        />\r\n                                    }\r\n                                    label=\"Other\"\r\n                                    labelPlacement=\"end\"\r\n                                    className=\"m-0 p-0\"\r\n                                    />\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n                        </div>\r\n\r\n                        <div className=\"col-xs-12 col-sm-5 align-self-center p-2\">\r\n                            {/* Reddit Username */}\r\n                            <TextField\r\n                            label=\"Reddit Username\"\r\n                            type=\"text\"\r\n                            name=\"redditUsername\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.redditUsername}\r\n                            placeholder=\"Optional\"\r\n                            error={touched.redditUsername}\r\n                            helperText={touched.redditUsername && errors.redditUsername}\r\n                            className=\"w-100\"\r\n                            variant=\"filled\"\r\n                            />                    \r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row justify-content-center m-0\">                            \r\n                        <div className=\"col-xs-12 col-sm-6 p-2\">\r\n                            {/* Submit Button */}\r\n\r\n                            <button\r\n                            type=\"submit\"\r\n                            disabled={isSubmitting}\r\n                            className=\"btn btn-danger w-100\"\r\n                            >\r\n                                Sign Up\r\n                            </button>\r\n                        </div>\r\n                        \r\n                        <div className=\"col-xs-12 col-sm-6 p-2\">\r\n                        {/* Clear Button */}\r\n                        <button\r\n                        type=\"button\"\r\n                        disabled={!dirty || isSubmitting}\r\n                        onClick={handleReset}\r\n                        className=\"btn btn-info w-100\"\r\n                        >\r\n                            Clear\r\n                        </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-end m-0 p-2\">                            \r\n                    Already have an account?<Link to=\"/login\" className=\"pl-1\">Log In</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// this is formik connect and not react-redux connect\r\nexport default connect(Register);","import React from 'react';\r\nimport Register from '../components/Register';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport { Formik } from 'formik';\r\nimport { loginUser } from '../middleware';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst RegisterContainer = props => (\r\n\r\n    <Formik\r\n    initialValues={{\r\n        email: \"\",\r\n        username: \"\",\r\n        password: \"\",\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        birthdate: \"\",\r\n        sex: \"\",\r\n        redditUsername: \"\"\r\n    }}\r\n    validate={async values => {\r\n        const errors = {};\r\n        \r\n        // required fields\r\n        const requiredFields = [\r\n            'username',\r\n            'password',\r\n            'email',\r\n            'firstName',\r\n            'lastName',\r\n            'birthdate'\r\n        ]\r\n        requiredFields.forEach(field => {\r\n            if (!values[field]) {\r\n                errors[field] = 'Required';\r\n            }\r\n        })\r\n    \r\n        // username\r\n        if (values.username && values.username.length > 20) {\r\n            errors.username = \"Username must be maximum 20 characters\";\r\n        }\r\n        else if (values.username) {\r\n            \r\n            const usernameResponse = await axios.get(`/checkField?username=${values.username}`)\r\n            // console.log(\"Username validation response\", usernameResponse)\r\n            if (usernameResponse.status=== 200 && usernameResponse.data && usernameResponse.data.fieldExists) {\r\n                console.log(\"I am here\");\r\n                errors.username = `${values.username} is already taken`;\r\n            }    \r\n        }\r\n        \r\n        // password\r\n        if (values.password && values.password.length < 8 && values.password.length > 16) {\r\n            errors.password = \"Password must be between 8 and 16 characters in length\";\r\n        }\r\n    \r\n        // email address\r\n        if (values.email && ! /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = \"Invalid email address\";    \r\n        }\r\n        else if (values.email) {\r\n            \r\n            // to use promise, use callback before axios.get with errors as argument to update errors and return it at the end\r\n            const emailResponse = await axios.get(`/checkField?email=${values.email}`);\r\n            // console.log(\"Email Validation Response\", emailResponse)\r\n            if (emailResponse.status === 200 && emailResponse.data && emailResponse.data.fieldExists) {\r\n                errors.email = `An account already exists with the email ${values.email}`;\r\n            }\r\n            \r\n        }\r\n        \r\n        return errors;\r\n    }}\r\n    onSubmit = {async (values, { setSubmitting }) => { \r\n        // save to mongodb\r\n        axios.post('/registerUser', values)\r\n        .then(response=> {\r\n            console.log(\"Register User success \", response);\r\n            props.dispatchLoginUser({\r\n                \"username\": values.username,\r\n                \"password\": values.password\r\n            })\r\n            console.log(\"Logged in after Registration\");\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Register user failed \", error);\r\n        })\r\n\r\n        setSubmitting(false);\r\n        console.log(\"Register form submmitted \", values)\r\n    }}\r\n    >\r\n        <div>\r\n            <Register></Register>\r\n            {props.loginInfo.isLogged ? <Redirect push to=\"/\" /> : null}\r\n        </div>\r\n    </Formik>\r\n)\r\n\r\nconst mapStateToProps = state => ({\r\n    loginInfo: state.login\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    dispatchLoginUser: values => dispatch(loginUser(values))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterContainer);\r\n","import React from 'react';\r\nimport './Login.css'\r\nimport { TextField } from '@material-ui/core';\r\nimport { connect, getIn } from 'formik';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Login = props => {\r\n    \r\n    /*\r\n    const {\r\n        values,\r\n        touched,\r\n        errors,\r\n        isSubmitting,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit\r\n    } = props;\r\n    */\r\n   const values = getIn(props.formik.values);\r\n   const touched = getIn(props.formik.touched);\r\n   const errors = getIn(props.formik.errors);\r\n   const isSubmitting = getIn(props.formik.isSubmitting);\r\n   const handleChange = getIn(props.formik.handleChange);\r\n   const handleBlur = getIn(props.formik.handleBlur);\r\n   const handleSubmit = getIn(props.formik.handleSubmit);\r\n   // const dispatch = getIn(props.formik.dispatch);\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div \r\n            className=\"\r\n                d-flex \r\n                flex-row\r\n                justify-content-center\r\n                \"\r\n            >\r\n                <div\r\n                className=\"\r\n                    d-flex\r\n                    flex-column\r\n                    justify-cotent-center\r\n                    w-xs\r\n                    \"\r\n                >\r\n                    <div className=\"m-0 p-1 text-center\">\r\n                        <h4>\r\n                            Login page\r\n                        </h4>\r\n                    </div>\r\n                    <div className=\"m-0 p-2 align-self-center\">\r\n                        <TextField\r\n                        label=\"Username\"\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        placeholder=\"Username\"\r\n                        value={values.username}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        error={touched.username}\r\n                        helperText={touched.username && errors.username}\r\n                        variant='outlined'\r\n                        className=\"w-100\"\r\n                        autoComplete=\"username\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"m-0 p-2 align-self-center\">\r\n                        <TextField\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        placeholder=\"Username\"\r\n                        value={values.password}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        error={touched.username}\r\n                        helperText={touched.username && errors.username}\r\n                        variant=\"outlined\"\r\n                        className=\"w-100\"\r\n                        autoComplete=\"password\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"m-0 p-2 align-self-center\">\r\n                        <button\r\n                        type=\"submit\"\r\n                        disabled={isSubmitting}\r\n                        className=\"btn btn-success w-100\"\r\n                        >\r\n                            Login\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"m-0 p-2 text-center\">\r\n                        Don't have an account. \r\n                        <Link to=\"\\register\" className=\"p-1\">Register</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// this is the formik connect not react-redux connect\r\nexport default connect(Login);","import React from 'react';\r\nimport Login from '../components/Login';\r\nimport { Formik } from 'formik';\r\nimport { connect } from 'react-redux';\r\n// import { loginRequest, loginSuccess, loginFailure } from '../actions';\r\n// import axios from 'axios';\r\n// import history from './history';\r\n// import { useHistory } from 'react-router-dom';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { loginUser } from '../middleware';\r\n\r\nconst LoginContainer = props => (\r\n    <Formik\r\n    initialValues={{\r\n        username: \"\",\r\n        password: \"\"\r\n    }}\r\n    validate={values => {\r\n        const errors = {}\r\n        \r\n        // username\r\n        if (!values.username) {\r\n            errors.username = \"Username not entered\";\r\n        }\r\n        else if (values.username.length > 20) {\r\n            errors.username = \"Username cannot be more than 20 characters\"\r\n        }\r\n\r\n        // password\r\n        if (!values.password) {\r\n            errors.password = \"Password missing\";\r\n        }\r\n\r\n        return errors;\r\n    }}\r\n    onSubmit={\r\n        async (values, { setSubmitting }) => {\r\n            props.dispatchLoginUser(values);\r\n            \r\n            setSubmitting(false);\r\n            console.log(\"Login form submitted \", values)\r\n        }\r\n    }\r\n    >\r\n        <div>\r\n        <Login />\r\n        {props.loginInfo.isLogged ? <Redirect push to=\"/\" /> : null}\r\n        </div>\r\n    </Formik>\r\n)\r\n\r\nconst mapStateToProps = state => ({\r\n    loginInfo: state.login\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    dispatchLoginUser: values => dispatch(loginUser(values))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { connect } from 'react-redux';\r\nimport SubredditContainer from './containers/SubredditContainer';\r\nimport HeaderContainer from './containers/HeaderContainer';\r\nimport Footer from './components/Footer';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport RegisterContainer from './containers/RegisterContainer';\r\nimport LoginContainer from './containers/LoginContainer';\r\n\r\n\r\nfunction App(props) {\r\n\r\n    // showAll in props controls if all Comments are shown or not \r\n    // (true for subComments, false for only top level comments)\r\n    const passProps = {showAll: false};\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                <HeaderContainer />\r\n                <Switch>\r\n                    <Route path=\"/\" exact render={() => <SubredditContainer {...passProps} />} />\r\n                    <Route path=\"/register\" exact component={RegisterContainer} />\r\n                    <Route path=\"/login\" exact component={LoginContainer} />\r\n                </Switch>\r\n                <Footer />\r\n            </div>\r\n        </Router>    \r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n        subreddit: state.subreddit,\r\n        filter: state.filter\r\n    })\r\n\r\n// const mapDispatchToProps = dispatch => ({ logIn: () => dispatch(logIn()) })\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import * as actionTypes from '../actionTypes'\r\n\r\nconst initialPostState = {\r\n    data: [],\r\n    error: null,\r\n    isLoading: false\r\n}\r\n\r\nconst postsReducer = (state=initialPostState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_POSTS_REQUEST:\r\n            return {\r\n                data: [],\r\n                error: null,\r\n                isLoading: true\r\n            }\r\n        case actionTypes.FETCH_POSTS_SUCCESS:\r\n            return {\r\n                data: action.data,\r\n                error: null,\r\n                isLoading: false\r\n            }\r\n        case actionTypes.FETCH_POSTS_FAILURE:\r\n            return {\r\n                data: [],\r\n                error: action.error,\r\n                isLoading: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default postsReducer;\r\n","import * as actionTypes from '../actionTypes';\r\n\r\nconst commentsReducer = (state={}, action) => {\r\n    let postComments;\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_COMMENTS_REQUEST:\r\n            postComments = {}\r\n            postComments[action.postId] = {\r\n                commentData: [],\r\n                error: null,\r\n                isLoading: true\r\n            }\r\n            return Object.assign({}, state, postComments)\r\n        \r\n        case actionTypes.FETCH_COMMENTS_SUCCESS:\r\n            postComments = {}\r\n            postComments[action.postId] = {\r\n                commentData: action.commentData,\r\n                error: null,\r\n                isLoading: false\r\n            }\r\n            return Object.assign({}, state, postComments)\r\n        \r\n        case actionTypes.FETCH_COMMENTS_FAILURE:\r\n            postComments = {}\r\n            postComments[action.postId] = {\r\n                commentData: [],\r\n                error: action.error,\r\n                isLoading: false\r\n            }\r\n            return Object.assign({}, state, postComments)\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default commentsReducer;\r\n","import * as actionTypes from '../actionTypes'\r\n\r\nconst subredditReducer = (state=\"funny\", action)  => {\r\n    switch(action.type) {\r\n        case actionTypes.SET_SUBREDDIT:\r\n            return action.subreddit;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default subredditReducer;\r\n","import * as actionTypes from '../actionTypes'\r\n\r\nconst filterReducer = (state=\"hot\", action) => {\r\n    switch(action.type) {\r\n        case actionTypes.FILTER_BEST:\r\n            return \"best\";\r\n        case actionTypes.FILTER_HOT:\r\n            return \"hot\";    \r\n        case actionTypes.FILTER_NEW:\r\n            return \"new\";\r\n        case actionTypes.FILTER_TOP:\r\n            return \"top\";\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default filterReducer;\r\n","import * as actionTypes from '../actionTypes';\r\n\r\nconst showSubredditModalReducer = (state=false, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SHOW_SUBREDDIT_MODAL:\r\n            return true;\r\n        case actionTypes.HIDE_SUBREDDIT_MODAL:\r\n            return false;\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n\r\nexport default showSubredditModalReducer;\r\n","import * as actionTypes from '../actionTypes';\r\n\r\nlet user = JSON.parse(localStorage.getItem('user'));\r\n\r\nconst initialLoginState = user ? { \r\n    isLogging: false,\r\n    isLogged: false,\r\n    error: null,\r\n    user,\r\n    userData: null\r\n} :\r\n{}\r\n\r\nconst loginReducer = (state=initialLoginState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.LOGIN_REQUEST:\r\n            return ({\r\n                isLogging: true,\r\n                isLogged: false,\r\n                user: action.user,\r\n                userData: null\r\n            })\r\n        case actionTypes.LOGIN_SUCCESS:\r\n            return ({\r\n                isLogging: false,\r\n                isLogged: true,\r\n                userData: action.userData\r\n            })\r\n        case actionTypes.LOGIN_FAILURE:\r\n            return ({\r\n                isLogging: false,\r\n                isLogged: false,\r\n                error: action.error\r\n            })\r\n        case actionTypes.LOGOUT:\r\n            return ({\r\n                isLogging: false,\r\n                isLogged: false,\r\n                user: null,\r\n                userData: null\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default loginReducer;\r\n","import * as actionTypes from '../actionTypes';\r\n\r\nconst numPostsReducer = (state=10, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.SET_NUMPOSTS:\r\n            return action.numPosts;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default numPostsReducer;\r\n","import postsReducer from './postsReducer';\r\nimport commentsReducer from './commentsReducer';\r\nimport subredditReducer from './subredditReducer';\r\nimport filterReducer from './filterReducer';\r\nimport showSubredditModalReducer from './showSubredditModalReducer';\r\nimport loginReducer from './loginReducer';\r\nimport numPostsReducer  from './numPostsReducer';\r\nimport {combineReducers} from 'redux';\r\n\r\n// only passing loggedReducer in ES6 interprets to loggedReducer: loggedReducer\r\n\r\nconst rootReducer = combineReducers({\r\n    // logged: loggedReducer,\r\n    posts: postsReducer,\r\n    subreddit: subredditReducer,\r\n    filter: filterReducer,\r\n    comments: commentsReducer,\r\n    showSubredditModal: showSubredditModalReducer,\r\n    login: loginReducer,\r\n    numPosts: numPostsReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport rootReducer from './reducers/rootReducer'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    compose(\r\n        applyMiddleware(thunk),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n        )\r\n    );\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}